#import "MassFatClockController.h"
#import "SSBLEDeviceManager.h"
#import "AppDelegate.h"
#import "BodyMeasure.h"
#import "Unit.h"
#import "CBPeripheralAdditions.h"


@interface MassFatClockController () <SSBLEDeviceDelegate> {
    BOOL _isConnected;
    BOOL _isAllowWrite;
}
@end


@implementation MassFatClockController

- (void)dealloc {
    
}

- (id)init {
    self = [super init];
    if (self) {
        _isConnected = NO;
        _isAllowWrite = YES;
    }
    return self;
}

- (IBAction)backClick:(id)sender {
    [self.navigationController popViewControllerAnimated:YES];
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    
    if (self.deviceType == SSBLESENSSUNBODYCLOCK) {
        self.button2.hidden = YES;
        self.button3.hidden = YES;
    }
    
    AppDelegate *delegate = [UIApplication sharedApplication].delegate;
    //[delegate.bleMgr connect:@{self.deviceID: self.advertiseName}];
    [delegate.bleMgr connectWithSerialNO:@{self.serialNO: self.advertiseName}];
    [delegate.bleMgr addDelegate:self];
}

- (void)viewWillDisappear:(BOOL)animated {
    [super viewWillDisappear:animated];
    
    AppDelegate *delegate = [UIApplication sharedApplication].delegate;
    //[delegate.bleMgr disconnect:self.deviceID];
    [delegate.bleMgr disconnectWithSerialNO:self.serialNO];
    [delegate.bleMgr removeDelegate:self];
}

- (void)peripheralDidConnect:(CBPeripheral *)peripheral {
    _isConnected = YES;
    
    dispatch_async(dispatch_get_main_queue(), ^(void){
    });
}

- (void)peripheralDidDisconnect:(CBPeripheral *)peripheral {
    _isConnected = NO;
    _isAllowWrite = NO;
    
    dispatch_async(dispatch_get_main_queue(), ^(void){
    });
}

- (void)peripheralDidAllowWrite:(CBPeripheral *)peripheral {
    _isAllowWrite = YES;
    
    /*
     if (peripheral.deviceType.intValue == SSBLESENSSUNBODYCLOCK ||
     peripheral.deviceType.intValue == SSBLESENSSUNFATCLOCK) {
     int repeatSun = 1;
     int repeatMon = 1;
     int repeatTue = 1;
     int repeatWed = 1;
     int repeatThu = 1;
     int repeatFri = 1;
     int repeatSat = 1;
     int hour = 9;
     int minute = 34;
     int tone = 1;
     AppDelegate *delegate = [UIApplication sharedApplication].delegate;
     [delegate.bleMgr sendSENSSUNBODYCLOCKSetting:peripheral :repeatSun :repeatMon :repeatTue :repeatWed :repeatThu :repeatFri :repeatSat :hour :minute :tone];
     }
     */
}

- (void)peripheralDidReceived:(CBPeripheral *)peripheral value:(BodyMeasure *)value values:(NSMutableArray *)values {
    dispatch_async(dispatch_get_main_queue(), ^(void){
        if (value && value.dataType == DataTypeWeigh) {
            self.lblWeightKg.text = [NSString stringWithFormat:@"体重：%.1fkg", value.bodyMassKG / 10.0f];
            self.lblWeightlb.text = [NSString stringWithFormat:@"体重：%.1flb", value.bodyMassLB / 10.0f];
            self.lblStable.text = [NSString stringWithFormat:@"数据：%@", (value.ifStable ? @"稳定" : @"不稳定")];
            
        } else if (value && value.dataType == DatatypeTestFat) {
            self.lblTestFat.text = [NSString stringWithFormat:@"脂肪率:%.1f%%, 水分:%.1f%%, 肌肉:%.1f%%, \r\n骨骼：%.1f%%, 卡路里：%dkcal, 蛋白质:%.1f%%,\r\n内脏脂肪:%.1f, 身体年龄:%d, 健康得分:%d", value.bodyFatPercentage/10.0f, value.hydro/10.0f, value.muscle/10.0f, value.bone/10.0f, value.kcal, value.protein/10.0f, value.visceralFat / 10.0f, value.bodyAge, value.healthScore];
        }
    });
}

- (IBAction)testFat:(id)sender {
    if (!_isAllowWrite || self.deviceType != SSBLESENSSUNFATCLOCK) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"not allow send" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
        return;
    }
    
    Unit *unit = [[Unit getHeightUnitDictionary] objectForKey:@"in"];
    int heightCM = 165;
    int heightInch = heightCM * unit.ExchangeRate;
    
    AppDelegate *delegate = [UIApplication sharedApplication].delegate;
    CBPeripheral *peripheral = delegate.bleMgr.deviceIDToPeripheralMap.allValues.lastObject;
    [delegate.bleMgr sendSENSSUNFATTestFatWithSex:1 userID:1 age:30 heightCM:heightCM heightInch:heightInch * 10 peripheral:peripheral];
}

- (IBAction)setClock1:(id)sender {
    AppDelegate *delegate = [UIApplication sharedApplication].delegate;
    CBPeripheral *peripheral = [delegate.bleMgr.deviceIDToPeripheralMap.allValues lastObject];
    int repeatSun = 1;
    int repeatMon = 1;
    int repeatTue = 1;
    int repeatWed = 1;
    int repeatThu = 1;
    int repeatFri = 1;
    int repeatSat = 1;
    int hour = 16;
    int minute = 28;
    int tone = 4;
    int index = 0;
    [delegate.bleMgr sendSENSSUNBODYCLOCKSetting:peripheral :repeatSun :repeatMon :repeatTue :repeatWed :repeatThu :repeatFri :repeatSat :hour :minute :tone :index];
}

- (IBAction)setClock2:(id)sender {
    AppDelegate *delegate = [UIApplication sharedApplication].delegate;
    CBPeripheral *peripheral = [delegate.bleMgr.deviceIDToPeripheralMap.allValues lastObject];
    int repeatSun = 1;
    int repeatMon = 1;
    int repeatTue = 1;
    int repeatWed = 1;
    int repeatThu = 1;
    int repeatFri = 1;
    int repeatSat = 1;
    int hour = 16;
    int minute = 31;
    int tone = 5;
    int index = 1;
    [delegate.bleMgr sendSENSSUNBODYCLOCKSetting:peripheral :repeatSun :repeatMon :repeatTue :repeatWed :repeatThu :repeatFri :repeatSat :hour :minute :tone :index];
}

- (IBAction)setClock3:(id)sender {
    AppDelegate *delegate = [UIApplication sharedApplication].delegate;
    CBPeripheral *peripheral = [delegate.bleMgr.deviceIDToPeripheralMap.allValues lastObject];
    int repeatSun = 1;
    int repeatMon = 1;
    int repeatTue = 1;
    int repeatWed = 1;
    int repeatThu = 1;
    int repeatFri = 1;
    int repeatSat = 1;
    int hour = 16;
    int minute = 34;
    int tone = 6;
    int index = 2;
    [delegate.bleMgr sendSENSSUNBODYCLOCKSetting:peripheral :repeatSun :repeatMon :repeatTue :repeatWed :repeatThu :repeatFri :repeatSat :hour :minute :tone :index];
}

- (void)peripheralDidWrite:(CBPeripheral *)peripheral data:(SSBLEReadWriteData *)data {
    dispatch_async(dispatch_get_main_queue(), ^(void){
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"设置成功" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
    });
}

- (void)peripheralDidFailToWrite:(CBPeripheral *)peripheral data:(SSBLEReadWriteData *)data {
    dispatch_async(dispatch_get_main_queue(), ^(void){
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"设置失败" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
    });
}

@end
